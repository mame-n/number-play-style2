require "test/unit"
require "./numplay_s2.rb"

class TC < Test::Unit::TestCase
  def setup
    @o = Numplay.new
  end

  def test_mtx
    base = Array.new(9) {Array.new(9) {1}}
    base[0][0]=0
    
    ans = [[2, 1, 1, 1, 1, 1, 1, 1, 1],
    [1, 1, 1, 1, 1, 1, 1, 1, 1],
    [1, 1, 1, 1, 1, 1, 1, 1, 1],
    [1, 1, 1, 1, 1, 1, 1, 1, 1],
    [1, 1, 1, 1, 1, 1, 1, 1, 1],
    [1, 1, 1, 1, 1, 1, 1, 1, 1],
    [1, 1, 1, 1, 1, 1, 1, 1, 1],
    [1, 1, 1, 1, 1, 1, 1, 1, 1],
    [1, 1, 1, 1, 1, 1, 1, 1, 1]]
    assert_equal( ans, @o.sudoku( base ) )
    
    base = Array.new(9) {Array.new(9) {0}}
    ans = [[2, 4, 6, 1, 3, 5, 8, 7, 9],
    [1, 3, 5, 8, 7, 9, 2, 4, 6],
    [8, 7, 9, 2, 4, 6, 1, 3, 5],
    [5, 6, 3, 4, 1, 2, 7, 9, 8],
    [4, 1, 2, 7, 9, 8, 5, 6, 3],
    [7, 9, 8, 5, 6, 3, 4, 1, 2],
    [6, 5, 4, 3, 2, 1, 9, 8, 7],
    [3, 2, 1, 9, 8, 7, 6, 5, 4],
    [9, 8, 7, 6, 5, 4, 3, 2, 1]]
    assert_equal( ans, @o.sudoku( base ) )
    
    base = [
      [0,0,6,0,5,0,0,0,9],
      [0,8,0,0,6,0,0,1,0],
      [7,0,3,0,0,2,8,0,0],
      [0,0,0,6,0,0,2,0,0],
      [6,3,0,0,1,0,0,4,7],
      [0,0,2,0,0,3,0,0,0],
      [0,0,7,5,0,0,3,0,2],
      [0,1,0,0,2,0,0,5,0],
      [9,0,0,0,3,0,4,0,0]
    ]
    ans = [[1, 4, 6, 3, 5, 8, 7, 2, 9],
    [2, 8, 9, 7, 6, 4, 5, 1, 3],
    [7, 5, 3, 1, 9, 2, 8, 6, 4],
    [4, 7, 1, 6, 8, 9, 2, 3, 5],
    [6, 3, 8, 2, 1, 5, 9, 4, 7],
    [5, 9, 2, 4, 7, 3, 1, 8, 6],
    [8, 6, 7, 5, 4, 1, 3, 9, 2],
    [3, 1, 4, 9, 2, 7, 6, 5, 8],
    [9, 2, 5, 8, 3, 6, 4, 7, 1]]
    assert_equal( ans, @o.sudoku(base))
    
    base = [
      [2,3,0,0,0,4,9,0,0],
      [0,7,0,0,0,0,0,1,0],
      [0,0,5,2,1,0,0,0,0],
      [4,0,0,0,7,9,0,0,0],
      [3,5,0,0,0,0,0,2,6],
      [0,0,0,3,6,0,0,0,4],
      [0,0,0,0,8,7,1,0,0],
      [0,2,0,0,0,0,0,3,0],
      [0,0,8,1,0,0,0,5,0]
    ]
    ans = [
      [2, 3, 1, 7, 5, 4, 9, 6, 8],
      [6, 7, 4, 9, 3, 8, 2, 1, 5],
      [9, 8, 5, 2, 1, 6, 4, 7, 3],
      [4, 6, 2, 5, 7, 9, 3, 8, 1],
      [3, 5, 9, 8, 4, 1, 7, 2, 6],
      [8, 1, 7, 3, 6, 2, 5, 9, 4],
      [5, 9, 3, 6, 8, 7, 1, 4, 2],
      [1, 2, 6, 4, 9, 5, 8, 3, 7],
      [7, 4, 8, 1, 2, 3, 6, 5, 9]
    ]
    assert_equal( ans, @o.sudoku( base ) )
  end

  def test_mtx76
    base = 
    [ [0, 0, 0, 0, 0, 3, 1, 0, 0],
      [1, 0, 7, 0, 9, 0, 0, 0, 0],
      [3, 8, 0, 1, 0, 0, 0, 0, 0],
      [7, 1, 0, 0, 0, 0, 0, 4, 2],
      [0, 0, 0, 0, 2, 0, 5, 8, 0],
      [8, 0, 2, 0, 0, 5, 0, 0, 0],
      [0, 0, 0, 0, 0, 2, 9, 6, 0],
      [0, 0, 4, 0, 8, 0, 0, 0, 0],
      [0, 0, 0, 5, 0, 0, 0, 3, 4] ]
    ans = 
    [[4, 5, 6, 2, 7, 3, 1, 9, 8],
    [1, 2, 7, 8, 9, 6, 4, 5, 3],
    [3, 8, 9, 1, 5, 4, 7, 2, 6],
    [7, 1, 5, 9, 3, 8, 6, 4, 2],
    [6, 4, 3, 7, 2, 1, 5, 8, 9],
    [8, 9, 2, 6, 4, 5, 3, 7, 1],
    [5, 3, 8, 4, 1, 2, 9, 6, 7],
    [9, 6, 4, 3, 8, 7, 2, 1, 5],
    [2, 7, 1, 5, 6, 9, 8, 3, 4] ]

    assert_equal( ans, @o.sudoku( base ))

  end

  def test_mtx001
    base = [
      [0,7,0,0,0,0,6,0,3],
      [0,0,0,0,6,0,0,0,0],
      [6,0,0,5,0,3,0,0,0],
      [2,5,0,0,0,0,0,0,0],
      [0,0,6,0,0,8,0,0,0],
      [0,0,0,0,0,0,0,0,0],
      [0,0,0,0,0,0,0,0,0],
      [0,0,0,2,0,0,0,0,0],
      [0,0,2,0,4,5,0,0,0]
    ]
    ans = [
      [1, 7, 5, 9, 8, 4, 6, 2, 3],
      [4, 3, 8, 1, 6, 2, 5, 7, 9],
      [6, 2, 9, 5, 7, 3, 1, 4, 8],
      [2, 5, 7, 3, 1, 9, 4, 8, 6],
      [3, 1, 6, 4, 5, 8, 2, 9, 7],
      [8, 9, 4, 7, 2, 6, 3, 1, 5],
      [5, 4, 1, 8, 3, 7, 9, 6, 2],
      [7, 6, 3, 2, 9, 1, 8, 5, 4],
      [9, 8, 2, 6, 4, 5, 7, 3, 1]
    ]
    assert_equal( ans, @o.sudoku( base ))
  end

  def test_mtx0928
    base = 
    [ 
      [0,0,0,0,0,0,0,0,0],
      [0,0,0,9,0,0,0,2,0],
      [0,8,3,0,0,0,0,0,7],
      [0,5,0,0,8,7,0,0,0],
      [0,0,0,0,6,0,0,0,0],
      [4,0,0,0,0,0,0,9,0],
      [2,0,9,1,0,0,0,0,0],
      [0,0,0,0,0,0,0,8,0],
      [0,0,0,0,0,0,0,4,6]
    ]
    ans = 
    [[7, 9, 2, 8, 1, 5, 3, 6, 4],
    [6, 1, 4, 9, 7, 3, 8, 2, 5],
    [5, 8, 3, 6, 2, 4, 9, 1, 7],
    [9, 5, 6, 2, 8, 7, 4, 3, 1],
    [1, 3, 8, 4, 6, 9, 5, 7, 2],
    [4, 2, 7, 5, 3, 1, 6, 9, 8],
    [2, 6, 9, 1, 4, 8, 7, 5, 3],
    [3, 4, 1, 7, 5, 6, 2, 8, 9],
    [8, 7, 5, 3, 9, 2, 1, 4, 6]]
    assert_equal( ans, @o.sudoku( base ))
  end

  def test_mtx0928_2
    base = 
    [ 
      [0,0,0,0,0,0,0,0,0],
      [0,0,0,9,0,1,0,0,0],
      [0,5,6,0,0,0,0,0,3],
      [0,0,0,8,0,0,0,9,0],
      [0,0,4,0,0,0,7,1,0],
      [2,0,0,0,6,0,0,0,0],
      [0,0,1,0,0,7,0,0,0],
      [0,0,0,0,5,0,0,0,6],
      [0,8,0,0,0,0,0,0,0]
    ]
    ans = 
    [[3, 9, 2, 6, 4, 5, 1, 8, 7],
    [8, 4, 7, 9, 3, 1, 2, 6, 5],
    [1, 5, 6, 2, 7, 8, 9, 4, 3],
    [5, 7, 3, 8, 1, 4, 6, 9, 2],
    [9, 6, 4, 5, 2, 3, 7, 1, 8],
    [2, 1, 8, 7, 6, 9, 5, 3, 4],
    [6, 2, 1, 3, 8, 7, 4, 5, 9],
    [4, 3, 9, 1, 5, 2, 8, 7, 6],
    [7, 8, 5, 4, 9, 6, 3, 2, 1]]
    assert_equal( ans, @o.sudoku( base ))
  end

  def test_mtx1013
    base = 
    [
      [0,7,0,0,1,0,0,5,0],
      [2,0,0,0,7,0,0,0,4],
      [0,0,1,3,0,9,2,0,0],
      [0,0,3,9,0,2,6,0,0],
      [6,2,0,0,0,0,0,1,9],
      [0,0,4,1,0,5,8,0,0],
      [0,0,7,4,0,8,3,0,0],
      [3,0,0,0,2,0,0,0,6],
      [0,1,0,0,5,0,0,4,0]
    ]
    ans = [
      [8,7,6,2,1,4,9,5,3],
      [2,3,9,5,7,6,1,8,4],
      [4,5,1,3,8,9,2,6,7],
      [1,8,3,9,4,2,6,7,5],
      [6,2,5,8,3,7,4,1,9],
      [7,9,4,1,6,5,8,3,2],
      [5,6,7,4,9,8,3,2,1],
      [3,4,8,7,2,1,5,9,6],
      [9,1,2,6,5,3,7,4,8]
    ]
    assert_equal( ans, @o.sudoku(base))
  end

  def test_sum_of_numbers
    base = 
    [
      [0,7,0,0,1,0,0,5,0],
      [2,0,0,0,7,0,0,0,4],
      [0,0,1,3,0,9,2,0,0],
      [0,0,3,9,0,2,6,0,0],
      [6,2,0,0,0,0,0,1,9],
      [0,0,4,1,0,5,8,0,0],
      [0,0,7,4,0,8,3,0,0],
      [3,0,0,0,2,0,0,0,6],
      [0,1,0,0,5,0,0,4,0]
    ]
    grouping = 
    [
      [0,7,0,0,1,0,0,5,0],
      [2,0,0,0,7,0,0,0,4],
      [0,0,1,3,0,9,2,0,0],
      [0,0,3,9,0,2,6,0,0],
      [6,2,0,0,0,0,0,1,9],
      [0,0,4,1,0,5,8,0,0],
      [0,0,7,4,0,8,3,0,0],
      [3,0,0,0,2,0,0,0,6],
      [0,1,0,0,5,0,0,4,0]
    ]
    assert_equal( 12, @o.sum_of_numbers( 2, 3, base, grouping ) )
  end

  def test_sudoku_grouping
    base = 
    [
      [0,0,0,0,9,0,0,0,0],
      [0,3,0,0,0,0,0,0,0],
      [0,0,4,0,0,0,0,0,0],
      [0,0,0,0,0,9,0,0,0],
      [0,0,0,4,0,0,0,6,0],
      [0,0,0,0,0,0,4,0,0],
      [4,0,0,0,0,0,0,0,0],
      [0,0,0,0,0,6,0,0,0],
      [0,0,0,0,0,0,9,0,0],
    ]
    ans = [
      [5,1,7,6,9,4,8,3,2],
      [9,3,6,8,1,2,7,4,5],
      [8,2,4,3,5,7,1,9,6],
      [1,4,5,2,6,9,3,7,8],
      [2,9,8,4,7,3,5,6,1],
      [6,7,3,5,8,1,4,2,9],
      [4,5,9,7,2,8,6,1,3],
      [3,8,1,9,4,6,2,5,7],
      [7,6,2,1,3,5,9,8,4],
    ]
    grouping = 
    [
      [ 0, 0, 1, 2, 2, 3, 3, 4, 5],
      [ 0, 6, 1, 7, 7, 3, 3, 4, 4],
      [ 6, 6, 8, 8, 9, 9, 9,10,10],
      [ 6,11, 8,12,13,13,13,10,14],
      [15,11,12,12,12,16,16,14,14],
      [15,15,17,17,18,18,19,19,20],
      [21,22,23,17,24,25,25,19,20],
      [21,26,27,27,24,28,29,29,29],
      [30,26,31,31,28,28,29,32,32]
    ]
    spec_group =
    #  0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32
    [ 15,13,15,21,12, 2,14, 9,12,13,22,13,21,18,15,15, 8,15, 9, 7,12, 7, 5, 9, 6,14,14,10,14,23, 7, 3,12 ]

    assert_equal( ans, @o.sudoku( base, grouping, spec_group ))
    
  end

  def test_sudoku_grouping02
    base = 
    [
      [0,0,0,4,0,0,0,0,0],
      [0,0,0,0,0,0,0,0,7],
      [0,0,0,0,0,0,9,0,0],
      [1,0,0,0,0,0,0,0,0],
      [0,0,0,0,0,0,1,0,0],
      [0,0,0,0,1,0,0,0,0],
      [0,0,0,0,0,0,0,9,0],
      [0,1,0,0,0,0,0,0,0],
      [0,0,4,0,0,1,0,0,0],
    ]
    ans = [
      [2,3,1,4,9,7,5,8,6],
      [8,9,5,1,2,6,4,3,7],
      [4,6,7,5,8,3,9,1,2],
      [1,7,8,3,5,4,6,2,9],
      [9,4,3,7,6,2,1,5,8],
      [6,5,2,8,1,9,3,7,4],
      [3,8,6,2,4,5,7,9,1],
      [5,1,9,6,7,8,2,4,3],
      [7,2,4,9,3,1,8,6,5]
    ]
    grouping = 
    [
      [ 0, 0, 1, 1, 2, 3, 3, 4, 4],
      [ 5, 5, 6, 6, 2, 2, 7, 7, 8],
      [ 9, 9, 9,10,10,10, 7, 7, 8],
      [11,12,12,12,13,13,14,15,16],
      [11,17,18,18,19,14,14,15,16],
      [20,17,18,19,19,21,22,22,16],
      [20,23,24,25,25,21,26,26,26],
      [24,24,24,27,28,28,29,29,29],
      [30,30,24,31,31,31,29,32,32]
    ]
    spec_group =
    #  0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32
    [  5, 5,17,12,14,17, 6,17, 9,17,16,10,18, 9, 9, 7,21, 9,12,15, 9,14,10, 8,25, 6,17, 6,15,17, 9,13,11]

    assert_equal( ans, @o.sudoku( base, grouping, spec_group ))
    
  end

  def test_get_target_member
    base = 
    [
      [1,0,0,0,9,0,0,0,0],
      [0,3,0,0,0,0,0,0,0],
      [0,0,4,0,0,0,0,0,0],
      [0,0,0,0,0,9,0,0,0],
      [0,0,0,4,0,0,0,6,0],
      [0,0,0,0,0,0,4,0,0],
      [4,0,0,0,0,0,0,0,0],
      [0,0,0,0,0,6,1,1,1],
      [0,0,0,0,0,0,9,0,0],
    ]
    @o.grouping = 
    [
      [ 0, 0, 1, 2, 2, 3, 3, 4, 5],
      [ 0, 6, 1, 7, 7, 3, 3, 4, 4],
      [ 6, 6, 8, 8, 9, 9, 9,10,10],
      [ 6,11, 8,12,13,13,13,10,14],
      [15,11,12,12,12,16,16,14,14],
      [15,15,17,17,18,18,19,19,20],
      [21,22,23,17,24,25,25,19,20],
      [21,26,27,27,24,28,29,29,29],
      [30,26,31,31,28,28,29,32,32]
    ]

    assert_equal( [1,0,0], @o.get_target_member( base, 0 ))
    assert_equal( [0,9], @o.get_target_member( base, 2 ))
    assert_equal( [1,1,1,9], @o.get_target_member( base, 29 ))
  end

  def test_is_sum_difference
    base = 
    [
      [1,0,0,0,9,0,0,0,0],
      [0,3,0,0,0,0,0,0,0],
      [0,0,4,0,0,0,0,0,0],
      [0,0,0,0,0,9,0,0,0],
      [0,0,0,4,0,0,0,6,0],
      [0,0,0,0,0,0,4,0,0],
      [4,0,0,0,0,0,0,0,0],
      [0,0,0,0,0,6,0,5,7],
      [0,0,0,0,0,0,9,0,0],
    ]
    @o.grouping = 
    [
      [ 0, 0, 1, 2, 2, 3, 3, 4, 5],
      [ 0, 6, 1, 7, 7, 3, 3, 4, 4],
      [ 6, 6, 8, 8, 9, 9, 9,10,10],
      [ 6,11, 8,12,13,13,13,10,14],
      [15,11,12,12,12,16,16,14,14],
      [15,15,17,17,18,18,19,19,20],
      [21,22,23,17,24,25,25,19,20],
      [21,26,27,27,24,28,29,29,29],
      [30,26,31,31,28,28,29,32,32]
    ]

    @o.spec_group =
    #  0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32
    [ 15,13,15,21,12, 2,14, 9,12,13,22,13,21,18,15,15, 8,15, 9, 7,12, 7, 5, 9, 6,14,14,10,14,23, 7, 3,12 ]

    assert_equal( false, @o.is_sum_difference?( 0, 0, base, 1 )) # include 0, so this is OK
    assert_equal( true, @o.is_sum_difference?( 0, 8, base, 8 ))  # filled by number and sum is difference. need to replace number.
    assert_equal( false, @o.is_sum_difference?( 7, 6, base, 2 )) # filled by number and sum is same . This is OK
    assert_equal( false, @o.is_sum_difference?( 8, 8, base, 0 )) # all 0, so this is OK

  end

end
